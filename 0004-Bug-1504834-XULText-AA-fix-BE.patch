From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martin Sirringhaus <msirringhaus@suse.de>
Date: Mon, 25 Nov 2019 09:31:46 +0200
Subject: [PATCH] Bug 1504834 - XULText-AA-fix BE

For FF68, AntiAliasing of XULTexts seem to be broken on big endian (s390x). Text and icons of the sandwich-menu to the

right of the address bar, as well as plugin-windows appears transparant, which usually means unreadable (white on white).

https://bugzilla.mozilla.org/show_bug.cgi?id=1504834#c9
---
 gfx/skia/skia/include/private/SkNx.h     | 11 +++++++++++
 gfx/skia/skia/src/opts/SkBlitMask_opts.h |  6 ++++++
 2 files changed, 17 insertions(+)

diff --git a/gfx/skia/skia/include/private/SkNx.h b/gfx/skia/skia/include/private/SkNx.h
index 06a6df9af2af67c8e9a7442905a5b519e6ee1e37..1b704eacea5e142dbe30f66c260512d7310d6eb5 100644
--- a/gfx/skia/skia/include/private/SkNx.h
+++ b/gfx/skia/skia/include/private/SkNx.h
@@ -238,7 +238,18 @@ struct SkNx<1,T> {
     AI SkNx operator*(const SkNx& y) const { return fVal * y.fVal; }
     AI SkNx operator/(const SkNx& y) const { return fVal / y.fVal; }
 
+    // On Big endian the commented out variant doesn't work,
+    // and honestly, I have no idea why it exists in the first place.
+    // The reason its broken is, I think, that it defaults to the double-variant of ToBits()
+    // which gets a 64-bit integer, and FromBits returns 32-bit,
+    // cutting off the wrong half again.
+    // Overall, I see no reason to have ToBits and FromBits at all (even for floats/doubles).
+    // Still we are only "fixing" this for big endian and leave little endian alone (never touch a running system)
+#ifdef SK_CPU_BENDIAN
+    AI SkNx operator&(const SkNx& y) const { return fVal & y.fVal; }
+#else
     AI SkNx operator&(const SkNx& y) const { return FromBits(ToBits(fVal) & ToBits(y.fVal)); }
+#endif
     AI SkNx operator|(const SkNx& y) const { return FromBits(ToBits(fVal) | ToBits(y.fVal)); }
     AI SkNx operator^(const SkNx& y) const { return FromBits(ToBits(fVal) ^ ToBits(y.fVal)); }
 
diff --git a/gfx/skia/skia/src/opts/SkBlitMask_opts.h b/gfx/skia/skia/src/opts/SkBlitMask_opts.h
index 2dfe5ecf960e25bdb399e5bc98999bcf66730554..e86fcef1ee5fa136c5143bd70b382681b6499668 100644
--- a/gfx/skia/skia/src/opts/SkBlitMask_opts.h
+++ b/gfx/skia/skia/src/opts/SkBlitMask_opts.h
@@ -203,7 +203,13 @@ namespace SK_OPTS_NS {
             //   ~~~>
             // a = 1*aa + d(1-1*aa) = aa + d(1-aa)
             // c = 0*aa + d(1-1*aa) =      d(1-aa)
+
+            // For big endian we have to swap the alpha-mask from 0,0,0,255 to 255,0,0,0
+#ifdef SK_CPU_BENDIAN
+            return Sk4px(Sk16b(aa) & Sk16b(255,0,0,0, 255,0,0,0, 255,0,0,0, 255,0,0,0))
+#else
             return Sk4px(Sk16b(aa) & Sk16b(0,0,0,255, 0,0,0,255, 0,0,0,255, 0,0,0,255))
+#endif
                  + d.approxMulDiv255(aa.inv());
         };
         while (h --> 0) {
